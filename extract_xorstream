#!/usr/bin/env ruby

class DataCollection
  def initialize(samples)
    @samples = samples
    @data_chunks = {}
  end

  def byte(path, i)
    chunk_id = i / 4096
    byte_id = i % 4096
    @data_chunks[[path, chunk_id]] ||= open(path){|fh|
      fh.seek(chunk_id * 4096)
      fh.read(4096)
    }
    rv = @data_chunks[[path, chunk_id]][byte_id, 1]
    rv && rv.ord
  end

  def stats_for_byte(i)
    rv = Hash.new(0)
    @samples.each{|path|
      val = byte(path, i)
      rv[val] += 1 if val
    }
    rv
  end
end

class ExtractXorstream
  def initialize(plaintext_samples, ciphertext_samples)
    @plaintext  = DataCollection.new(plaintext_samples)
    @ciphertext = DataCollection.new(ciphertext_samples)
  end

  def analyze_bits!(i, pdistr, cdistr)
    (0..7).each do |j|
      p0, p1, c0, c1 = 0, 0, 0, 0
      pdistr.each do |pval,count|
        if pval[j] == 1
          p1 += count
        else
          p0 += count
        end
      end
      cdistr.each do |cval,count|
        if cval[j] == 1
          c1 += count
        else
          c0 += count
        end
      end
      # 3:1 threshold is pretty aggressive
      threshold = 3
      if p0 >= p1*threshold
        pval = 0
      elsif p1 >= p0*threshold
        pval = 1
      else
        pval = nil
      end
      if c0 >= c1*threshold
        cval = 0
      elsif c1 >= c0*threshold
        cval = 1
      else
        cval = nil
      end

      xorkey = (pval && cval) ? (pval ^ cval) : nil
      puts "%6d.%d %s - [%d/%d - %d/%d - %p/%p]" % [i,j,
        (xorkey ? "% 2x"%[xorkey] : " ?"),p0,p1,c0,c1,pval,cval]
    end

  end

  def analyze_byte!(i)
    pdistr = @plaintext.stats_for_byte(i)
    cdistr = @ciphertext.stats_for_byte(i)
    if pdistr.size == 1 and cdistr.size == 1
      xorkey = pdistr.keys[0] ^ cdistr.keys[0]
      puts "%6d - %02x" % [i, xorkey]
    else
      analyze_bits!(i, pdistr, cdistr)
    end
  end

  def run!
    128.times do |i|
      analyze_byte!(i)
    end
  end
end

ExtractXorstream.new(
  Dir["plaintext_samples/*"],
  Dir["ciphertext_samples/*"]
).run!
