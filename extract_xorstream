#!/usr/bin/env ruby

class DataCollection
  def initialize(samples)
    @samples = samples
    @data_chunks = {}
  end

  def byte(path, i)
    chunk_id = i / 4096
    byte_id = i % 4096
    @data_chunks[[path, chunk_id]] ||= open(path){|fh|
      fh.seek(chunk_id * 4096)
      fh.read(4096)
    }
    rv = @data_chunks[[path, chunk_id]][byte_id, 1]
    rv && rv.ord
  end

  def stats_for_byte(i)
    rv = Hash.new(0)
    @samples.each{|path|
      rv[byte(path, i)] += 1
    }
    rv
  end
end

class ExtractXorstream
  def initialize(plaintext_samples, ciphertext_samples)
    @plaintext  = DataCollection.new(plaintext_samples)
    @ciphertext = DataCollection.new(ciphertext_samples)
  end

  def analyze_byte!(i)
    pdistr = @plaintext.stats_for_byte(i)
    cdistr = @ciphertext.stats_for_byte(i)
    if pdistr.size == 1 and cdistr.size == 1
      xorkey = pdistr.keys[0] ^ cdistr.keys[0]
      puts "%6d - %2x" % [i, xorkey]
    else
      puts "%6d - ??" % [i]
    end
  end

  def run!
    128.times do |i|
      analyze_byte!(i)
    end
  end
end

ExtractXorstream.new(
  Dir["plaintext_samples/*"],
  Dir["ciphertext_samples/*"]
).run!
